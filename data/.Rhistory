fitted
n<- length(vdat$S)
under <- data.frame()
newDat <- data.frame(ELEVATION = with(vdat, seq(from = min(ELEVATION), to = max(ELEVATION), length = 96)))
over <- data.frame(ELEVATION = newDat$ELEVATION)
for(i in 1:n){
lm0 <- lm(vdat$S[-i] ~ vdat$ELEVATION[-i], data = vdat[-i, ])
lm4 <- lm(vdat$S[-i] ~ vdat$ELEVATION[-i] + I(vdat$ELEVATION[-i]^2) + I(vdat$ELEVATION[-i]^3) + I(vdat$ELEVATION[-i]^4), data = vdat[-i, ])
a <- coef(lm0)[1]; b <- coef(lm0)[2]
under <- rbind.data.frame(under, data.frame(a = as.numeric(a), b = as.numeric(b)))
fitted <- predict(lm4, newdata = newDat)
over <- cbind(over, fitted)
}
colnames(over)[2:ncol(over)]
colnames(over)[2:ncol(over)] <- paste('fitted_', 1:(ncol(over)-1), sep='')
over_fit <- over %>%
gather(yhat, simulation, fitted_1:fitted_97)
ggplot() +
geom_point(data = vdat,
aes(x = ELEVATION, y = S)) +
geom_abline(data = under, aes(intercept = a, slope = b))
ggplot() +
geom_point(data = vdat,
aes(x = ELEVATION, y = S)) +
geom_line(data = over_fit, aes(x = ELEVATION, y = simulation, group = yhat))
ggplot() +
geom_point(data = vdat,
aes(x = ELEVATION, y = S)) +
geom_line(data = over, aes(x = ELEVATION, y = fitted_1, group = yhat))
over
ggplot() +
geom_point(data = vdat,
aes(x = ELEVATION, y = S)) +
geom_line(data = over, aes(x = ELEVATION, y = fitted_1))
over
vdat %>%
ggplot() +
geom_point(aes(x = ELEVATION, y = S)) +
stat_smooth(method = 'lm', se = F,
aes(x = ELEVATION, y = S)) +
stat_smooth(method = 'glm', family = 'poisson', se = F,
aes(x = ELEVATION, y = S)), colour = 'black') +
vdat %>%
ggplot() +
geom_point(aes(x = ELEVATION, y = S)) +
stat_smooth(method = 'lm', se = F,
aes(x = ELEVATION, y = S)) +
stat_smooth(method = 'glm', family = 'poisson', se = F,
aes(x = ELEVATION, y = S), colour = 'black') +
ylab('Species richness') +
xlab('Elevation (metres)') +
theme_bw()
?stat_smooth
vdat %>%
ggplot() +
geom_point(aes(x = ELEVATION, y = S)) +
stat_smooth(method = 'lm', se = F,
aes(x = ELEVATION, y = S)) +
stat_smooth(method = 'glm', method.args = list(family = 'poisson'), se = F,
aes(x = ELEVATION, y = S), colour = 'black') +
ylab('Species richness') +
xlab('Elevation (metres)') +
theme_bw()
vdat %>%
ggplot() +
geom_point(aes(x = ELEVATION, y = S)) +
stat_smooth(method = 'lm', se = F,
aes(x = ELEVATION, y = S)) +
stat_smooth(method = 'glm', method.args = list(family = 'poisson'), se = F,
aes(x = ELEVATION, y = S), colour = 'black', lty = 2) +
ylab('Species richness') +
xlab('Elevation (metres)') +
theme_bw()
plot_grid(fig3a, fig3b, nrow = 1)
fig3a <- vdat %>%
ggplot() +
geom_point(aes(x = ELEVATION, y = S)) +
stat_smooth(method = 'lm', se = F,
aes(x = ELEVATION, y = S)) +
stat_smooth(method = 'glm', method.args = list(family = 'poisson'), se = F,
aes(x = ELEVATION, y = S), colour = 'black', lty = 2) +
ylab('Species richness') +
xlab('Elevation (metres)') +
theme_bw()
fig3b <- vdat %>%
ggplot() +
geom_point(aes(x = ELEVATION, y = S)) +
stat_smooth(method = 'lm', se = F,
aes(x = ELEVATION, y = S)) +
stat_smooth(method = 'glm', method.args = list(family = 'poisson'), se = F,
aes(x = ELEVATION, y = S), colour = 'black', lty = 2) +
scale_y_continuous(trans = 'log') +
ylab('Species richness') +
xlab('Elevation (metres)') +
theme_bw()
plot_grid(fig3a, fig3b, nrow = 1)
fig3b <- vdat %>%
ggplot() +
geom_point(aes(x = ELEVATION, y = S)) +
stat_smooth(method = 'lm', se = F,
aes(x = ELEVATION, y = S)) +
stat_smooth(method = 'glm', method.args = list(family = 'poisson'), se = F,
aes(x = ELEVATION, y = S), colour = 'black', lty = 2) +
scale_y_continuous(trans = 'log2') +
ylab('Species richness') +
xlab('Elevation (metres)') +
theme_bw()
plot_grid(fig3a, fig3b, nrow = 1)
vdat %>%
ggplot() +
geom_point(aes(x = pH, y = S)) +
stat_smooth(method = 'lm', se = F, aes(x = pH, y = S), lty = 2) +
stat_smooth(aes(x = pH, y = S), se = F)
vdat
vdat %>%
ggplot() +
geom_point(aes(x = SOILDPT, y = S)) +
stat_smooth(method = 'lm', se = F, aes(x = SOILDPT, y = S), lty = 2) +
stat_smooth(aes(x = SOILDPT, y = S), se = F)
fig4a <- vdat %>%
ggplot() +
geom_point(aes(x = pH, y = S)) +
stat_smooth(method = 'lm', se = F,
aes(x = pH, y = S)) +
stat_smooth(method = 'glm', method.args = list(family = 'poisson'), se = F,
aes(x = pH, y = S), colour = 'black', lty = 2) +
ylab('Species richness') +
xlab('Elevation (metres)') +
theme_bw()
fig4b <- vdat %>%
ggplot() +
geom_point(aes(x = pH, y = S)) +
stat_smooth(method = 'lm', se = F,
aes(x = pH, y = S)) +
stat_smooth(method = 'glm', method.args = list(family = 'poisson'), se = F,
aes(x = pH, y = S), colour = 'black', lty = 2) +
scale_y_continuous(trans = 'log2') +
ylab('Species richness') +
xlab('Elevation (metres)') +
theme_bw()
plot_grid(fig4a, fig4b, nrow = 1)
vdat %>%
ggplot() +
geom_point(aes(x = ELEVATION, y = S, group = LITHIC, colour = factor(LITHIC))) +
stat_smooth(method = 'lm', se = F,
aes(x = ELEVATION, y = S, colour = LITHIC)) +
ylab('Species richness') +
xlab('Elevation (metres)') +
theme_bw()
vdat %>%
ggplot() +
geom_point(aes(x = ELEVATION, y = S, group = LITHIC, colour = factor(LITHIC))) +
stat_smooth(method = 'lm', se = F,
aes(x = ELEVATION, y = S, colour = LITHIC, group = LITHIC)) +
ylab('Species richness') +
xlab('Elevation (metres)') +
theme_bw()
vdat %>%
ggplot() +
geom_point(aes(x = ELEVATION, y = S, group = LITHIC, colour = factor(LITHIC))) +
stat_smooth(method = 'lm', se = F,
aes(x = ELEVATION, y = S, colour = factor(LITHIC), group = factor(LITHIC))) +
ylab('Species richness') +
xlab('Elevation (metres)') +
theme_bw()
plot_grid(fig1, fig1a, nrow = 1)
fig1 <- vdat %>%
ggplot() +
geom_point(aes(x = ELEVATION, y = S)) +
stat_smooth(method = 'lm', se = F,
aes(x = ELEVATION, y = S)) +
ylab('Species richness') +
xlab('Elevation (metres)') +
theme_bw()
fig1a <- vdat %>%
ggplot() +
geom_point(aes(x = ELEVATION, y = S, group = LITHIC, colour = factor(LITHIC))) +
stat_smooth(method = 'lm', se = F,
aes(x = ELEVATION, y = S, colour = factor(LITHIC), group = factor(LITHIC))) +
scale_color_discrete(name = 'Lithic soil') +
ylab('Species richness') +
xlab('Elevation (metres)') +
theme_bw()
lm_eqn = expression(paste(italic(y)[i], ' = ', beta, italic(x)[i], ' + ', epsilon[i], sep = ''))
f1 <- ggdraw() + draw_label(lm_eqn, size = 14)
f1 <- plot_grid(f1, fig1, ncol = 1, rel_heights = c(0.2, 0.9))
plot_grid(fig1, fig1a, nrow = 1)
fig1a <- vdat %>%
ggplot() +
geom_point(aes(x = ELEVATION, y = S, group = LITHIC, colour = factor(LITHIC))) +
stat_smooth(method = 'lm', se = F,
aes(x = ELEVATION, y = S, colour = factor(LITHIC), group = factor(LITHIC))) +
scale_color_discrete(name = 'Lithic soil') +
ylab('Species richness') +
xlab('Elevation (metres)') +
theme_bw() +
theme(legend.position = c(0.7, 0.9))
plot_grid(fig1, fig1a, nrow = 1)
fig1a <- vdat %>%
ggplot() +
geom_point(aes(x = ELEVATION, y = S, group = LITHIC, colour = factor(LITHIC))) +
stat_smooth(method = 'lm', se = F,
aes(x = ELEVATION, y = S, colour = factor(LITHIC), group = factor(LITHIC))) +
scale_color_discrete(name = 'Lithic soil') +
ylab('Species richness') +
xlab('Elevation (metres)') +
theme_bw() +
theme(legend.position = c(0.8, 0.8))
plot_grid(fig1, fig1a, nrow = 1)
fig1a <- vdat %>%
ggplot() +
geom_point(aes(x = ELEVATION, y = S, group = LITHIC, colour = factor(LITHIC))) +
stat_smooth(method = 'lm', se = F,
aes(x = ELEVATION, y = S, colour = factor(LITHIC), group = factor(LITHIC))) +
scale_color_discrete(name = 'Lithic soil') +
ylab('Species richness') +
xlab('Elevation (metres)') +
theme_bw() +
theme(legend.position = c(0.8, 0.8), legend.background = element_blank())
plot_grid(fig1, fig1a, nrow = 1)
vdat
comm_long
load (url ('http://www.davidzeleny.net/anadat-r/lib/exe/fetch.php/data:vltava.r'))
str(vltava)
# separate into site x species and environment dataframes
env <- vltava$env %>% as_tibble()
pairs(env)
comm <- vltava$spe %>% as_tibble()
# simplify comm into N (perCov > 100?) and S (per site), convert to long format first
comm_long <- comm %>%
mutate(site = 1:nrow(comm)) %>%
gather(species, value = perCov, Abiealb23:Violtri1) %>%
as_tibble()
comm_long
comm_presence <- comm_long %>%
group_by(site, species) %>%
summarise(
occurrence = ifelse(perCov==0, 0, 1))
comm_presence
comm_presence <- inner_join(env, comm_presence, by = 'site')
env
comm_long
comm_long %>% distinct(site)
env <- vltava$env %>% as_tibble() %>%
mutate(site = 1:nrow(env))
comm_presence <- inner_join(env, comm_presence, by = 'site')
comm_presence
env <- vltava$env %>% as_tibble() %>%
mutate(site = 1:nrow(env))
# pairs(env)
comm <- vltava$spe %>% as_tibble()
# simplify comm into N (perCov > 100?) and S (per site), convert to long format first
comm_long <- comm %>%
mutate(site = 1:nrow(comm)) %>%
gather(species, value = perCov, Abiealb23:Violtri1) %>%
as_tibble()
comm_summary <- comm_long %>%
filter(perCov > 0) %>%
group_by(site) %>%
summarise(
N = sum(perCov),
S = n_distinct(species)
)
comm_presence <- comm_long %>%
group_by(site, species) %>%
summarise(
occurrence = ifelse(perCov==0, 0, 1))
vdat <- bind_cols(comm_summary, env)
comm_presence <- inner_join(env, comm_presence, by = 'site') %>%
select(-TRANSECT:NUTR)
comm_presence <- inner_join(env, comm_presence, by = 'site') %>%
select(-TRANSECT, -LIGHT,  -TEMP,  -CONT, -MOIST, -REACT, -NUTR)
comm_presence
setwd('~/Dropbox/4teaching/MLU_teaching2018/data/')
save(vdat, vltava,  comm_presence, file = 'vltava.Rdata')
plot_grid(fig3a, fig3b, nrow = 1)
comm_presence %>%
ggplot() +
geom_point(aes(x = pH, y = occurrence))
?glm
comm_presence
comm_presence <- comm_long %>%
group_by(site, species) %>%
summarise(
occurrence = ifelse(perCov==0, 0, 1),
N = n_distinct(site),
p = sum(occurrence = 1))
c
comm_presence
%>% ungroup()
occurrence = ifelse(perCov==0, 0, 1)) %>%
ungroup()
occurrence = ifelse(perCov==0, 0, 1)) %>%
ungroup()
comm_presence
comm_presence <- comm_long %>%
group_by(site, species) %>%
summarise(
occurrence = ifelse(perCov==0, 0, 1))
comm_presence <- comm_long %>%
group_by(site, species) %>%
summarise(
occurrence = ifelse(perCov==0, 0, 1)) %>%
ungroup()
spp_occupancy <- comm_presence %>%
group_by(species) %>%
summarise(
N = n_distinct(site),
p = sum(occurrence = 1))
spp_occupancy
spp_occupancy <- comm_presence %>%
group_by(species) %>%
summarise(
N = n_distinct(site),
p = sum(occurrence==1))
spp_occupancy
comm_long %>%
group_by(site, species) %>%
summarise(
occurrence = ifelse(perCov==0, 0, 1))
comm_presence <- comm_long %>%
group_by(site, species) %>%
summarise(
occurrence = ifelse(perCov==0, 0, 1)) %>%
ungroup() %>%
group_by(site) %>%
summarise(
n_spp_present = sum(occurrence),
spp_pool = n_distinct(species)) %>%
ungroup()
comm_presence
?stat_smooth
data(kyphosis)
rpart::kyphosis
comm_presence
site_occupancy <- comm_presence %>%
group_by(site, species) %>%
summarise(
occurrence = ifelse(perCov==0, 0, 1))
site_occupancy <- comm_long %>%
group_by(site, species) %>%
summarise(
occurrence = ifelse(perCov==0, 0, 1))
site_occupancy
site_occupancy <- inner_join(env, site_occupancy, by = 'site')
site_occupancy %>%
ggplot() +
geom_point(aes(x = pH, y = occurrence)) +
stat_smooth(aes(x = pH, y = occurrence),
method = 'glm', method.args = list(family = 'binomial'))
scale_x_continuous(breaks = c(0, 1))
site_occupancy %>%
ggplot() +
geom_point(aes(x = pH, y = occurrence)) +
stat_smooth(aes(x = pH, y = occurrence, group = species),
method = 'glm', method.args = list(family = 'binomial'))
scale_x_continuous(breaks = c(0, 1))
site_occupancy %>%
ggplot() +
geom_point(aes(x = pH, y = occurrence)) +
stat_smooth(aes(x = pH, y = occurrence),
method = 'glm', method.args = list(family = 'binomial')) +
scale_x_continuous(breaks = c(0, 1))
load (url ('http://www.davidzeleny.net/anadat-r/lib/exe/fetch.php/data:vltava.r'))
str(vltava)
# separate into site x species and environment dataframes
env <- vltava$env %>% as_tibble() %>%
mutate(site = 1:nrow(env))
# pairs(env)
comm <- vltava$spe %>% as_tibble()
# simplify comm into N (perCov > 100?) and S (per site), convert to long format first
comm_long <- comm %>%
mutate(site = 1:nrow(comm)) %>%
gather(species, value = perCov, Abiealb23:Violtri1) %>%
as_tibble()
comm_summary <- comm_long %>%
filter(perCov > 0) %>%
group_by(site) %>%
summarise(
N = sum(perCov),
S = n_distinct(species)
)
comm_presence <- comm_long %>%
group_by(site, species) %>%
summarise(
occurrence = ifelse(perCov==0, 0, 1)) %>%
ungroup() %>%
group_by(site) %>%
summarise(
n_spp_present = sum(occurrence),
spp_pool = n_distinct(species)) %>%
ungroup()
site_occupancy <- comm_long %>%
group_by(site, species) %>%
summarise(
occurrence = ifelse(perCov==0, 0, 1))
vdat <- bind_cols(comm_summary, env)
site_occupancy <- inner_join(env, site_occupancy, by = 'site') %>%
select(-TRANSECT, -LIGHT,  -TEMP,  -CONT, -MOIST, -REACT, -NUTR)
comm_presence <- inner_join(env, comm_presence, by = 'site') %>%
select(-TRANSECT, -LIGHT,  -TEMP,  -CONT, -MOIST, -REACT, -NUTR)
setwd('~/Dropbox/4teaching/MLU_teaching2018/data/')
save(vdat, vltava,  comm_presence, site_occupancy, file = 'vltava.Rdata')
ls()
site_occupancy
rm(list=ls())
load(url('https://github.com/sablowes/MLU_teaching2018/raw/master/data/vltava.Rdata'))
ls()
rm(list=ls())
library(tidyverse)
library(cowplot)
#-------load data and prepare it for visualisation and modelling-------------------
load (url ('http://www.davidzeleny.net/anadat-r/lib/exe/fetch.php/data:vltava.r'))
str(vltava)
# separate into site x species and environment dataframes
env <- vltava$env %>% as_tibble() %>%
mutate(site = 1:nrow(env))
# pairs(env)
comm <- vltava$spe %>% as_tibble()
# simplify comm into N (perCov > 100?) and S (per site), convert to long format first
comm_long <- comm %>%
mutate(site = 1:nrow(comm)) %>%
gather(species, value = perCov, Abiealb23:Violtri1) %>%
as_tibble()
comm_summary <- comm_long %>%
filter(perCov > 0) %>%
group_by(site) %>%
summarise(
N = sum(perCov),
S = n_distinct(species)
)
comm_presence <- comm_long %>%
group_by(site, species) %>%
summarise(
occurrence = ifelse(perCov==0, 0, 1)) %>%
ungroup() %>%
group_by(site) %>%
summarise(
n_spp_present = sum(occurrence),
spp_pool = n_distinct(species)) %>%
ungroup()
site_occupancy <- comm_long %>%
group_by(site, species) %>%
summarise(
occurrence = ifelse(perCov==0, 0, 1))
vdat <- bind_cols(comm_summary, env)
site_occupancy <- inner_join(env, site_occupancy, by = 'site') %>%
select(-TRANSECT, -LIGHT,  -TEMP,  -CONT, -MOIST, -REACT, -NUTR)
comm_presence <- inner_join(env, comm_presence, by = 'site') %>%
select(-TRANSECT, -LIGHT,  -TEMP,  -CONT, -MOIST, -REACT, -NUTR)
setwd('~/Dropbox/4teaching/MLU_teaching2018/data/')
save(vdat, vltava,  comm_presence, site_occupancy, file = 'vltava.Rdata')
env <- vltava$env %>%
mutate(site = 1:nrow(vltava$env)) %>%
as_tibble()
comm
comm_long
comm_summary
comm_presence
site_occupancy
vdat <- bind_cols(comm_summary, env)
site_occupancy <- inner_join(env, site_occupancy, by = 'site') %>%
select(-TRANSECT, -LIGHT,  -TEMP,  -CONT, -MOIST, -REACT, -NUTR)
comm_presence <- inner_join(env, comm_presence, by = 'site') %>%
select(-TRANSECT, -LIGHT,  -TEMP,  -CONT, -MOIST, -REACT, -NUTR)
setwd('~/Dropbox/4teaching/MLU_teaching2018/data/')
save(vdat, vltava,  comm_presence, site_occupancy, file = 'vltava.Rdata')
rm(list=ls())
ls()
load(url('https://github.com/sablowes/MLU_teaching2018/raw/master/data/vltava.Rdata'))
ls()
load(url('https://github.com/sablowes/MLU_teaching2018/raw/master/data/vltava.Rdata'))
ls()
plot_grid(fig3a, fig3b, nrow = 1)
fig3a <- vdat %>%
ggplot() +
geom_point(aes(x = ELEVATION, y = S)) +
stat_smooth(method = 'lm', se = F,
aes(x = ELEVATION, y = S)) +
stat_smooth(method = 'glm', method.args = list(family = 'poisson'), se = F,
aes(x = ELEVATION, y = S), colour = 'black', lty = 2) +
ylab('Species richness') +
xlab('Elevation (metres)') +
theme_bw()
fig3b <- site_occupancy %>%
ggplot() +
geom_point(aes(x = pH, y = occurrence)) +
stat_smooth(aes(x = pH, y = occurrence),
method = 'glm', method.args = list(family = 'binomial')) +
scale_y_continuous(breaks = c(0, 1)) +
ylab('Probability of occurrence') +
theme_bw()
plot_grid(fig3a, fig3b, nrow = 1)
fig3b <- site_occupancy %>%
ggplot() +
geom_point(aes(x = ELEVATION, y = occurrence)) +
stat_smooth(aes(x = ELEVATION, y = occurrence),
method = 'glm', method.args = list(family = 'binomial')) +
scale_y_continuous(breaks = c(0, 1)) +
ylab('Probability of occurrence') +
theme_bw()
plot_grid(fig3a, fig3b, nrow = 1)
pH
fig3b <- site_occupancy %>%
ggplot() +
geom_point(aes(x = pH, y = occurrence)) +
stat_smooth(aes(x = pH, y = occurrence),
method = 'glm', method.args = list(family = 'binomial')) +
scale_y_continuous(breaks = c(0, 1)) +
ylab('Probability of occurrence') +
theme_bw()
plot_grid(fig3a, fig3b, nrow = 1)
