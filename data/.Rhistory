# visual inspection of rarefaction curves
plot_rarefaction(bird_mob_in, 'heterogeneity', '0', pooled = F, method = 'indiv')
plot_rarefaction(bird_mob_in, 'heterogeneity', '0', pooled = T, method = 'indiv')
# visual inspection of rarefaction curves
plot_rarefaction(bird_mob_in, 'habitat', 'all', pooled = F, method = 'indiv')
plot_rarefaction(bird_mob_in, 'habitat', 'all', pooled = T, method = 'indiv')
birds_discrete <- get_mob_stats(bird_mob_in, 'heterogeneity')
plot(birds_discrete, multi_panel = T)
birds_discrete2 <- get_mob_stats(bird_mob_in, 'habitat')
plot(birds_discrete2, multi_panel = T)
habitat_simple <- with(aviurba$mil,
ifelse((grassland=='yes' & scrubby=='no' & deciduous=='no' & conifer=='no'), 'grassland',
ifelse((grassland=='no' & scrubby=='yes' & deciduous=='no' & conifer=='no'), 'scrub',
ifelse((grassland=='no' & scrubby=='no' & deciduous=='yes' & conifer=='no'), 'tree',
ifelse((grassland=='no' & scrubby=='no' & deciduous=='no' & conifer=='yes'), 'tree',
ifelse((grassland=='yes' & scrubby=='yes' & deciduous=='no' & conifer=='no'), 'mixed',
ifelse((grassland=='yes' & scrubby=='no' & deciduous=='yes' & conifer=='no'), 'mixed',
ifelse((grassland=='yes' & scrubby=='no' & deciduous=='no' & conifer=='yes'), 'mixed',
ifelse((grassland=='no' & scrubby=='yes' & deciduous=='yes' & conifer=='no'), 'mixed',
ifelse((grassland=='no' & scrubby=='yes' & deciduous=='no' & conifer=='yes'), 'mixed',
ifelse((grassland=='no' & scrubby=='no' & deciduous=='yes' & conifer=='yes'), 'mixed',
ifelse((grassland=='no' & scrubby=='yes' & deciduous=='yes' & conifer=='yes'), 'mixed',
ifelse((grassland=='yes' & scrubby=='no' & deciduous=='yes' & conifer=='yes'), 'mixed',
ifelse((grassland=='yes' & scrubby=='yes' & deciduous=='yes' & conifer=='no'), 'mixed',
ifelse((grassland=='yes' & scrubby=='yes' & deciduous=='yes' & conifer=='yes'), 'mixed', 'unknown')))))))))))))))
environ <- data.frame(habitat = habitat,
simple_habitat = habitat_simple,
heterogeneity = habitat_hetero,
x = x,
y = y)
bird_mob_in <- make_mob_in(aviurba$fau, environ)
plot_rarefaction(bird_mob_in, 'simple_habitat', 'unknown', pooled = F, method = 'indiv')
plot_rarefaction(bird_mob_in, 'simple_habitat', 'unknown', pooled = T, method = 'indiv')
birds_discrete2 <- get_mob_stats(bird_mob_in, 'simple_habitat')
plot(birds_discrete2, multi_panel = T)
habitat_simple
habitat
birds_contin <- get_delta_stats(bird_mob_in, 'simple_habitat')
birds_contin <- get_delta_stats(bird_mob_in, 'simple_habitat', ref_group = 'mixed')
plot(birds_contin)
plot(birds_contin, trt_group = 'unknown', ref_group = 'mixed')
plot(birds_contin, trt_group = 'scrub', ref_group = 'mixed')
plot(birds_contin, trt_group = 'tree', ref_group = 'mixed')
?get_delta_stats
plot_rarefaction(bird_mob_in, 'simple_habitat', 'unknown', pooled = F, method = 'indiv')
plot_rarefaction(bird_mob_in, 'simple_habitat', 'unknown', pooled = T, method = 'indiv')
plot_rarefaction(bird_mob_in, 'simple_habitat', 'unknown', pooled = F, method = 'indiv')
knitr::opts_chunk$set(echo = TRUE)
library(mobsim)
library(mobr)
source('~/Dropbox/4teaching/yDiv_Biomove2017/stack_hack.R')
inv_mob_out
inv_mob_in <- make_mob_in(comm = inv_comm, plot_attr = inv_plot_attr)
inv_mob_out <- get_delta_stats(mob_in = inv_mob_in, group_var = 'group', ref_group = 'uninvaded', n_perm = 20)
overlap_effects(inv_mob_out)
overlap_effects(inv_mob_out, trt_group = 'invaded')
aviurba$mil
buildings <- with(aviurba$mil,
ifelse((small.bui=='yes' & high.bui=='no'), 'small',
ifelse((small.bui=='no' & high.bui=='yes'), 'high',
ifelse((small.bui=='yes' & high.bui=='yes'), 'both', 'none'))))
environ <- data.frame(habitat = habitat,
simple_habitat = habitat_simple,
heterogeneity = habitat_hetero,
noise = aviurba$mil$noisy,
buildings = buildings,
x = x,
y = y)
rownames(aviurba$fau) <- 1:nrow(aviurba$fau)
# create mob-in object
bird_mob_in <- make_mob_in(aviurba$fau, environ)
plot_rarefaction(bird_mob_in, 'noise', 'no', pooled = F, method = 'indiv')
plot_rarefaction(bird_mob_in, 'noise', 'no', pooled = T, method = 'indiv')
birds_discrete3 <- get_mob_stats(bird_mob_in, 'noise')
plot(birds_discrete3, multi_panel = T)
birds_contin_noise <- get_delta_stats(bird_mob_in, 'noise', ref_group = 'no')
plot(birds_contin_noise, trt_group = 'yes', ref_group = 'no')
overlap_effects(birds_contin_noise, trt_group = 'yes')
setwd('~/Dropbox/4teaching/MLU_teaching2018/data/')
library(tidyverse)
aviurba$fau
siteSpp <- bind_cols(aviurba$fau, environ)
siteSpp
t(siteSpp)
siteSpp
sppTraits <- bind_cols(t(aviurba$fau), aviurba$traits)
t(aviurba$fau)
aviurba$traits
t(aviurba$fau) %>% as_tibble
t(aviurba$fau)
aviurba$fau
cbind(aviurba$fau, aviurba$traits)
cbind(t(aviurba$fau), aviurba$traits)
aviurba$fau
data(aviurba)
aviurba$fau
aviurba$fau %>%
gather(species, site, abundance, sp1:sp40)
aviurba$fau %>%
gather(species, site, sp1:sp40)
sppSite <- aviurba$fau %>%
sppSite_long <- aviurba$fau %>%
gather(species, site, sp1:sp40)
sppSite <- aviurba$fau %>%
mutate(site = 1:nrow(aviurba$fau))
sppSite
sppSite_long <- sppSite %>%
gather(site, sp1:sp40)
sppSite_long <- sppSite %>%
gather(site, Sp1:Sp40)
sppSite_long <- sppSite %>%
gather(site, value = abundance, Sp1:Sp40)
sppSite_long
environ
distinct(sppSite_long, site)
sppSite_long %>% distinct(site)
sppSite_long
sppSite_long <- sppSite %>%
gather(species, value = abundance, Sp1:Sp40) %>%
as_tibble()
sppSite_long
sppSite_long %>% distinct(site)
environ
sppSite_long
aviurba$traits
rownames(aviurba$traits)
traits <- aviurba$traits %>%
mutate(species = rownames(aviurba$traits)) %>%
as_tibble()
traits
environ
environ <- environ %>%
mutate(site = rownames(environ))
environ <- environ %>%
mutate(site = rownames(environ)) %>%
as_tibble()
environ
birds_long <- inner_join(sppSite_long, traits, by = 'species')
sppSite_long
birds_long
birds_long <- inner_join(birds_long, environ, by = 'site')
birds_long
environ
sppSite <- aviurba$fau %>%
mutate(site = 1:nrow(aviurba$fau) %>% as.character())
sppSite_long <- sppSite %>%
gather(species, value = abundance, Sp1:Sp40) %>%
as_tibble()
traits <- aviurba$traits %>%
mutate(species = rownames(aviurba$traits)) %>%
as_tibble()
environ <- environ %>%
mutate(site = rownames(environ)) %>%
as_tibble()
birds_long <- inner_join(sppSite_long, traits, by = 'species')
birds_long <- inner_join(birds_long, environ, by = 'site')
birds_long
save(aviurba, environ, birds_long, file = 'birdData.Rdata')
rm(list=ls())
# mobr
library(mobr)
library(ade4)
# bird data
load(url('https://github.com/sablowes/MLU_teaching2018/raw/master/data/birdData.Rdata'))
ls()
library(tidyverse)
rownames(aviurba$fau) <- 1:nrow(aviurba$fau)
# create mob-in object
bird_mob_in <- make_mob_in(aviurba$fau, environ)
# visual inspection of rarefaction curves
plot_rarefaction(bird_mob_in, 'heterogeneity', '0', pooled = F, method = 'indiv')
plot_rarefaction(bird_mob_in, 'heterogeneity', '0', pooled = T, method = 'indiv')
bird_mob_in <- make_mob_in(aviurba$fau, environ)
birds_discrete3 <- get_mob_stats(bird_mob_in, 'noise')
plot(birds_discrete3, multi_panel = T)
birds_contin_noise <- get_delta_stats(bird_mob_in, 'noise', ref_group = 'no')
N = sum(abundance),
S = n_distinct(species),
ENSPIE = vegan::diversity(abundance, index = 'invsimpson')) %>%
ungroup()
noise_summary <- birds_long %>%
# remove unobserved species
filter(abundance > 0) %>%
group_by(site, noise) %>%
summarise(
N = sum(abundance),
S = n_distinct(species),
ENSPIE = vegan::diversity(abundance, index = 'invsimpson')) %>%
ungroup()
noise_summary
birds_long
N = sum(abundance),
S = n_distinct(species),
ENSPIE = vegan::diversity(abundance, index = 'invsimpson'),
noise = unique(noise)) %>%
ungroup()
noise_summary <- birds_long %>%
# remove unobserved species
filter(abundance > 0) %>%
group_by(site, migratory) %>%
summarise(
N = sum(abundance),
S = n_distinct(species),
ENSPIE = vegan::diversity(abundance, index = 'invsimpson'),
noise = unique(noise)) %>%
ungroup()
noise_summary
noise_summary %>%
gglot() +
geom_boxplot(aes(x = interaction(noise, migratory), y = N))
noise_summary %>%
ggplot() +
geom_boxplot(aes(x = interaction(noise, migratory), y = N))
birds_long
noise_summary <- birds_long %>%
# remove unobserved species
filter(abundance > 0) %>%
group_by(site, feed.hab, migratory) %>%
summarise(
N = sum(abundance),
S = n_distinct(species),
ENSPIE = vegan::diversity(abundance, index = 'invsimpson'),
noise = unique(noise)) %>%
ungroup()
noise_summary %>%
ggplot() +
geom_boxplot(aes(x = interaction(noise, migratory), y = N)) +
theme_bw()
noise_summary %>%
ggplot() +
facet_wrap(~feed.hab, scales = 'free') +
geom_boxplot(aes(x = interaction(noise, migratory), y = N)) +
theme_bw()
rm(list=ls())
library(mobsim)
library(mobr)
S_pool = 100
N = 1000
cv_abund = list(list(cv_abund=1), list(cv_abund=5))
maps = NULL
maps$agg = lapply(cv_abund, function(x)
sim_thomas_community(S_pool, N, 'lnorm', x, fix_s_sim = T))
maps$poi = lapply(cv_abund, function(x)
sim_poisson_community(S_pool, N, 'lnorm', x, fix_s_sim = T))
par(mfrow=c(2,2))
for(i in seq_along(cv_abund)) {
plot(maps$agg[[i]], axes=F, xlab='', ylab='',
main='Aggregated treatment')
plot(maps$poi[[i]], axes=F, xlab='', ylab='',
main='Random treatment')
}
n_quadrats = 10
comms = lapply(maps, function(x)
lapply(x, function(y)
sample_quadrats(y, n_quadrats, plot = F)))
spdat = rbind(dplyr::bind_rows(lapply(comms$agg, function(x) x$spec_dat)),
dplyr::bind_rows(lapply(comms$poi, function(x) x$spec_dat)))
coords = rbind(dplyr::bind_rows(lapply(comms$agg, function(x) x$xy_dat)),
dplyr::bind_rows(lapply(comms$poi, function(x) x$xy_dat)))
plot_attr = data.frame(coords,
spatial = rep(c('agg', 'poi'),
each= n_quadrats * length(cv_abund)),
SAD_CV = rep(rep(unlist(cv_abund),
each= n_quadrats), 2))
plot_attr$group = paste(plot_attr$spatial, plot_attr$SAD_CV, sep='_')
sim_mob_in = make_mob_in(spdat, plot_attr)
mob_stats = get_mob_stats(sim_mob_in, 'group')
plot(mob_stats, multi_panel = T)
maps$agg
source('~/.active-rstudio-document')
mob_stats
S_pool = 100
N = 1000
# run across a more even and less even SAD
cv_abund = list(list(cv_abund=1), list(cv_abund=5))
# generate maps
maps = NULL
maps$agg = lapply(cv_abund, function(x)
sim_thomas_community(S_pool, N, 'lnorm', x, fix_s_sim = T))
maps$poi = lapply(cv_abund, function(x)
sim_poisson_community(S_pool, N, 'lnorm', x, fix_s_sim = T))
# output maps
#maps of the four treatments
par(mfrow=c(2,2))
for(i in seq_along(cv_abund)) {
plot(maps$agg[[i]], axes=F, xlab='', ylab='',
main='Aggregated treatment')
plot(maps$poi[[i]], axes=F, xlab='', ylab='',
main='Random treatment')
}
# sample n_quadrats from the mapped communities
n_quadrats = 10
comms = lapply(maps, function(x)
lapply(x, function(y)
sample_quadrats(y, n_quadrats, plot = F)))
# aggregate comms data into a community and attributes dataframes
spdat = rbind(dplyr::bind_rows(lapply(comms$agg, function(x) x$spec_dat)),
dplyr::bind_rows(lapply(comms$poi, function(x) x$spec_dat)))
coords = rbind(dplyr::bind_rows(lapply(comms$agg, function(x) x$xy_dat)),
dplyr::bind_rows(lapply(comms$poi, function(x) x$xy_dat)))
plot_attr = data.frame(coords,
spatial = rep(c('agg', 'poi'),
each= n_quadrats * length(cv_abund)),
SAD_CV = rep(rep(unlist(cv_abund),
each= n_quadrats), 2))
plot_attr$group = paste(plot_attr$spatial, plot_attr$SAD_CV, sep='_')
sim_mob_in = make_mob_in(spdat, plot_attr)
# compute stats
mob_stats = get_mob_stats(sim_mob_in, 'group')
plot(mob_stats, multi_panel = T)
mob_stats
head(mob_stats$samples_stats)
head(spdat)
head(plot_attr)
plot_attr %>% distinct(spatial)
plot_attr %>% distinct(group)
plot_attr %>% distinct(SAD_CV, group)
mob_stats$samples_stats %>%
filter(index == 'N')
alpha_S <- mob_stats$samples_stats %>%
filter(index=='S') %>%
group_by(group) %>%
nest()
alpha_S
alpha_S[[1]]
alpha_S$data[[1]]
alpha_S <- mob_stats$samples_stats %>%
filter(index=='S') %>%
group_by(group) %>%
nest(value)
alpha_S$data[[1]]
spdat
comm_dat <- bind_cols(spdat, plot_attr)
head(comm_dat)
gamma_comms <- comm_dat %>%
group_by(group) %>%
nest(species1:species99)
gamma_comms
alpha_N <- mob_stats$samples_stats %>%
filter(index == 'N') %>%
group_by(group) %>%
nest(value)
alpha_N
alpha_N$data[[1]]
gamma_comms <- inner_join(gamma_comms, alpha_N, by = 'group')
gamma_comms
gamma_S <- gamma_comms %>%
group_by(group) %>%
purrr::map2(.x = data.x, .y = data.y, .f = rarefaction(.x, method = 'indiv', effort = .y))
gamma_S <- gamma_comms %>%
group_by(group) %>%
purrr::map2(.x = data.x, .y = data.y, .f = rarefaction(.x$value, method = 'indiv', effort = .y$value))
gamma_S <- gamma_comms %>%
group_by(group) %>%
mutate(gamma_rareS = purrr::map2(data.x, data.y, ~ rarefaction(.x$value, method = 'indiv', effort = .y$value)))
gamma_S
gamma_S$gamma_rareS[1]
gamma_S$gamma_rareS[[1]]
gamma_S$gamma_rareS[[2]]
gamma_S$gamma_rareS[[3]]
gamma_S$gamma_rareS[[4]]
gamma_comms
gamma_comms$data.x
gamma_S <- gamma_comms %>%
group_by(group) %>%
mutate(gamma_rareS = purrr::map2(data.x, data.y, ~ rarefaction(.x, method = 'indiv', effort = .y$value)))
gamma_S
gamma_S$gamma_rareS[[4]]
gamma_comms$data.x[[1]]
gamma_comms$data.x[[1]] %>% class()
gamma_S
?map2
gamma_S <- gamma_comms %>%
group_by(group) %>%
mutate(gamma_rareS = purrr::map2(data.x, data.y, ~ rarefaction(.x, method = 'indiv', effort = .y$value))) %>%
mutate(beta_rareS = purrr::map2(data.y, gamma_rareS, ~ .y / .x))
gamma_S
gamma_S$beta_rareS
mob_stats$samples_stats %>% distinct(index)
gamma_S
betaS_rare <- gamma_S %>%
unnest(beta_rareS)
betaS_rare
betaS_rare <- gamma_S %>%
unnest(beta_rareS) %>%
ungroup() %>%
mutate(index = 'beta_S_rare')
betaS_rare
bind_rows(mob_stats$samples_stats, betaS_rare)
bind_rows(mob_stats$samples_stats, betaS_rare) %>% data.frame()
mob_stats$samples_stats
betaS_rare
mob_stats$samples_stats <- bind_rows(mob_stats$samples_stats, betaS_rare)
mob_stats$samples_stats %>% distinct(index)
mob_stats$samples_stats %>%
filter(index=='beta_S' | index=='beta_S_n' | index=='beta_f_0' | index=='beta_S_PIE' | index=='beta_S_rare')
mob_stats$samples_stats %>%
filter(index=='beta_S' | index=='beta_S_n' | index=='beta_f_0' | index=='beta_S_PIE' | index=='beta_S_rare') %>%
facet_wrap(~index) +
ggplot(aes(x = group, y = value)) +
theme_bw()
mob_stats$samples_stats %>%
filter(index=='beta_S' | index=='beta_S_n' | index=='beta_f_0' | index=='beta_S_PIE' | index=='beta_S_rare') %>%
ggplot() +
facet_wrap(~index) +
geom_boxplot(aes(x = group, y = value))
mob_stats$samples_stats %>%
filter(index=='beta_S' | index=='beta_S_n' | index=='beta_f_0' | index=='beta_S_PIE' | index=='beta_S_rare') %>%
ggplot() +
facet_wrap(~index, scales = 'free') +
geom_boxplot(aes(x = group, y = value))
gamma_comms <- comm_dat %>%
group_by(group) %>%
nest(species1:species99)
gamma_comms <- inner_join(gamma_comms, alpha_N, by = 'group')
gamma_comms <- inner_join(gamma_comms, alpha_S, by = 'group')
gamma_comms
gamma_S <- gamma_comms %>%
group_by(group) %>%
mutate(gamma_rareS = purrr::map2(data.x, data.y, ~ rarefaction(.x, method = 'indiv', effort = .y$value))) %>%
mutate(beta_rareS = purrr::map2(data, gamma_rareS, ~ .y / .x))
betaS_rare <- gamma_S %>%
unnest(beta_rareS) %>%
ungroup() %>%
mutate(index = 'beta_S_rare')
mob_stats$samples_stats <- bind_rows(mob_stats$samples_stats, betaS_rare)
mob_stats$samples_stats %>%
filter(index=='beta_S' | index=='beta_S_n' | index=='beta_f_0' | index=='beta_S_PIE' | index=='beta_S_rare') %>%
ggplot() +
facet_wrap(~index, scales = 'free') +
geom_boxplot(aes(x = group, y = value))
gamma_S
gamma_S_2 <- gamma_S %>%
unnest(data.y, data, gamma_rareS, beta_rareS)
gamma_S_2
13.3/5
gamma_S_2 %>% filter(value2 < 1)
alpha_N <- mob_stats$samples_stats %>%
filter(index == 'N') %>%
group_by(group) %>%
nest(alphaN = value)
alpha_N
alpha_N <- mob_stats$samples_stats %>%
filter(index == 'N') %>%
group_by(group) %>%
mutate(alphaN = value) %>%
select(-value) %>%
nest(alphaN)
alpha_N
alpha_N$data[[1]]
alpha_S <- mob_stats$samples_stats %>%
filter(index=='S') %>%
group_by(group) %>%
mutate(alphaS = value) %>%
select(-value) %>%
nest(alphaS)
comm_dat
gamma_comms <- comm_dat %>%
group_by(group) %>%
nest(species1:species99)
gamma_comms <- inner_join(gamma_comms, alpha_N, by = 'group')
gamma_comms <- inner_join(gamma_comms, alpha_S, by = 'group')
gamma_comms
gamma_S <- gamma_comms %>%
group_by(group) %>%
mutate(gamma_rareS = purrr::map2(data.x, data.y, ~ rarefaction(.x, method = 'indiv', effort = .y$value))) %>%
mutate(beta_rareS = purrr::map2(data, gamma_rareS, ~ .y / .x))
gamma_S
gamma_comms
gamma_comms$data.x[[1]]
gamma_comms$data.y[[1]]
gamma_comms$data[[1]]
gamma_S <- gamma_comms %>%
group_by(group) %>%
mutate(gamma_rareS = purrr::map2(data.x, data.y, ~ rarefaction(.x, method = 'indiv', effort = .y$alphaN))) %>%
mutate(beta_rareS = purrr::map2(data, gamma_rareS, ~ .y / .x$alphaS))
gamma_S_2 <- gamma_S %>%
unnest(data.y, data, gamma_rareS, beta_rareS)
gamma_S_2
betaS_rare <- gamma_S %>%
unnest(beta_rareS) %>%
ungroup() %>%
mutate(index = 'beta_S_rare')
mob_stats$samples_stats <- bind_rows(mob_stats$samples_stats, betaS_rare)
mob_stats$samples_stats %>%
filter(index=='beta_S' | index=='beta_S_n' | index=='beta_f_0' | index=='beta_S_PIE' | index=='beta_S_rare') %>%
ggplot() +
facet_wrap(~index, scales = 'free') +
geom_boxplot(aes(x = group, y = value))
theme_bw()
mob_stats$samples_stats
load(url('https://github.com/sablowes/MLU_teaching2018/raw/master/data/birdData.Rdata'))
rownames(aviurba$fau) <- 1:nrow(aviurba$fau)
# create mob-in object
bird_mob_in <- make_mob_in(aviurba$fau, environ)
birds_discrete3 <- get_mob_stats(bird_mob_in, 'noise')
plot(birds_discrete3, multi_panel = T)
noise_summary <- birds_long %>%
# remove unobserved species
filter(abundance > 0) %>%
group_by(site, feed.hab, migratory) %>%
summarise(
N = sum(abundance),
S = n_distinct(species),
ENSPIE = vegan::diversity(abundance, index = 'invsimpson'),
noise = unique(noise)) %>%
ungroup()
noise_summary %>%
ggplot() +
facet_wrap(~feed.hab, scales = 'free') +
geom_boxplot(aes(x = interaction(noise, migratory), y = N)) +
theme_bw()
